var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MPSGE_MP","category":"page"},{"location":"#MPSGE","page":"Home","title":"MPSGE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MPSGE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is a test","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MPSGE_MP]","category":"page"},{"location":"#MPSGE_MP.build!-Tuple{MPSGEModel}","page":"Home","title":"MPSGE_MP.build!","text":"build!(M::MPSGEModel)\n\nCurrently, I'm creating the variables when the sector is added to the model. However, I think we can do this here without issue. I would prefer doing it here.\n\n\n\n\n\n","category":"method"},{"location":"#MPSGE_MP.extract_scalars-Tuple{MPSGE_MP.MPSGEScalarVariable}","page":"Home","title":"MPSGE_MP.extract_scalars","text":"extract_scalars\n\nTakes a variable and extracts it the sub-variables. \n\n\n\n\n\n","category":"method"},{"location":"#MPSGE_MP.production_sectors-Tuple{MPSGEModel}","page":"Home","title":"MPSGE_MP.production_sectors","text":"production_sectors(m::MPSGEModel)\n\nReturn all sectors that have a corresponding production block.  These are coming from a dictionary, so order is not guaranteed.\n\nThis is primarily used when generating constraints.\n\n\n\n\n\n","category":"method"},{"location":"#MPSGE_MP.sectors-Tuple{Commodity}","page":"Home","title":"MPSGE_MP.sectors","text":"sectors(C::Commodity)\n\nReturn only the sectors that have the input commodity in their production block. \n\nThis is an optimization in building the model as the structure is very sparse  iterating over all sectors is expensive.\n\n\n\n\n\n","category":"method"},{"location":"#MPSGE_MP.sectors-Tuple{MPSGEModel}","page":"Home","title":"MPSGE_MP.sectors","text":"sectors(m::MPSGEModel)\n\nReturn all sectors in a model\n\n\n\n\n\n","category":"method"},{"location":"#MPSGE_MP.solve!-Tuple{MPSGE_MP.AbstractMPSGEModel}","page":"Home","title":"MPSGE_MP.solve!","text":"solve!(m::abstract_mpsge_model; keywords)\nFunction to solve the model. Triggers the build if the model hasn't been built yet.\n\nExample\n\njulia> solve!(m, cumulative_iteration_limit=0)\n\n\n\n\n\n","category":"method"}]
}
